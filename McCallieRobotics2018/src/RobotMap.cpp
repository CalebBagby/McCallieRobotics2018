// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::driveSystemDriveMotorFrontLeft;
std::shared_ptr<frc::SpeedController> RobotMap::driveSystemDriveMotorRearLeft;
std::shared_ptr<frc::SpeedController> RobotMap::driveSystemDriveMotorFrontRight;
std::shared_ptr<frc::SpeedController> RobotMap::driveSystemDriveMotorRearRight;
std::shared_ptr<frc::RobotDrive> RobotMap::driveSystemMainDrive;
std::shared_ptr<frc::SpeedController> RobotMap::turningSystemTurnMotorFrontLeft;
std::shared_ptr<frc::Encoder> RobotMap::turningSystemQuadratureFrontLeft;
std::shared_ptr<frc::PIDController> RobotMap::turningSystemTurnFrontLeft;
std::shared_ptr<frc::SpeedController> RobotMap::turningSystemTurnMotorRearLeft;
std::shared_ptr<frc::Encoder> RobotMap::turningSystemQuadratureRearLeft;
std::shared_ptr<frc::PIDController> RobotMap::turningSystemTurnRearLeft;
std::shared_ptr<frc::SpeedController> RobotMap::turningSystemTurnMotorFrontRight;
std::shared_ptr<frc::Encoder> RobotMap::turningSystemQuadratureFrontRight;
std::shared_ptr<frc::PIDController> RobotMap::turningSystemTurnFrontRight;
std::shared_ptr<frc::SpeedController> RobotMap::turningSystemTurnMotorRearRight;
std::shared_ptr<frc::Encoder> RobotMap::turningSystemQuadratureRearRight;
std::shared_ptr<frc::PIDController> RobotMap::turningSystemTurnRearRight;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveSystemDriveMotorFrontLeft.reset(new frc::Spark(4));
    lw->AddActuator("DriveSystem", "DriveMotorFrontLeft", std::static_pointer_cast<frc::Spark>(driveSystemDriveMotorFrontLeft));
    
    driveSystemDriveMotorRearLeft.reset(new frc::Spark(5));
    lw->AddActuator("DriveSystem", "DriveMotorRearLeft", std::static_pointer_cast<frc::Spark>(driveSystemDriveMotorRearLeft));
    
    driveSystemDriveMotorFrontRight.reset(new frc::Spark(6));
    lw->AddActuator("DriveSystem", "DriveMotorFrontRight", std::static_pointer_cast<frc::Spark>(driveSystemDriveMotorFrontRight));
    
    driveSystemDriveMotorRearRight.reset(new frc::Spark(7));
    lw->AddActuator("DriveSystem", "DriveMotorRearRight", std::static_pointer_cast<frc::Spark>(driveSystemDriveMotorRearRight));
    
    driveSystemMainDrive.reset(new frc::RobotDrive(driveSystemDriveMotorFrontLeft, driveSystemDriveMotorRearLeft,
              driveSystemDriveMotorFrontRight, driveSystemDriveMotorRearRight));
    
    driveSystemMainDrive->SetSafetyEnabled(true);
        driveSystemMainDrive->SetExpiration(0.1);
        driveSystemMainDrive->SetSensitivity(0.5);
        driveSystemMainDrive->SetMaxOutput(1.0);

    turningSystemTurnMotorFrontLeft.reset(new frc::Spark(0));
    lw->AddActuator("TurningSystem", "TurnMotorFrontLeft", std::static_pointer_cast<frc::Spark>(turningSystemTurnMotorFrontLeft));
    
    turningSystemQuadratureFrontLeft.reset(new frc::Encoder(0, 1, false, frc::Encoder::k4X));
    lw->AddSensor("TurningSystem", "QuadratureFrontLeft", turningSystemQuadratureFrontLeft);
    turningSystemQuadratureFrontLeft->SetDistancePerPulse(1.0);
    turningSystemQuadratureFrontLeft->SetPIDSourceType(frc::PIDSourceType::kRate);
    turningSystemTurnFrontLeft.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ turningSystemQuadratureFrontLeft.get(), turningSystemTurnMotorFrontLeft.get(), 0.02));
    lw->AddActuator("TurningSystem", "TurnFrontLeft", turningSystemTurnFrontLeft);
    turningSystemTurnFrontLeft->SetContinuous(false); turningSystemTurnFrontLeft->SetAbsoluteTolerance(0.2); 
    turningSystemTurnFrontLeft->SetOutputRange(-1.0, 1.0);
    turningSystemTurnMotorRearLeft.reset(new frc::Spark(1));
    lw->AddActuator("TurningSystem", "TurnMotorRearLeft", std::static_pointer_cast<frc::Spark>(turningSystemTurnMotorRearLeft));
    
    turningSystemQuadratureRearLeft.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    lw->AddSensor("TurningSystem", "QuadratureRearLeft", turningSystemQuadratureRearLeft);
    turningSystemQuadratureRearLeft->SetDistancePerPulse(1.0);
    turningSystemQuadratureRearLeft->SetPIDSourceType(frc::PIDSourceType::kRate);
    turningSystemTurnRearLeft.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ turningSystemQuadratureRearLeft.get(), turningSystemTurnMotorRearLeft.get(), 0.02));
    lw->AddActuator("TurningSystem", "TurnRearLeft", turningSystemTurnRearLeft);
    turningSystemTurnRearLeft->SetContinuous(false); turningSystemTurnRearLeft->SetAbsoluteTolerance(0.2); 
    turningSystemTurnRearLeft->SetOutputRange(-1.0, 1.0);
    turningSystemTurnMotorFrontRight.reset(new frc::Spark(2));
    lw->AddActuator("TurningSystem", "TurnMotorFrontRight", std::static_pointer_cast<frc::Spark>(turningSystemTurnMotorFrontRight));
    
    turningSystemQuadratureFrontRight.reset(new frc::Encoder(4, 5, false, frc::Encoder::k4X));
    lw->AddSensor("TurningSystem", "QuadratureFrontRight", turningSystemQuadratureFrontRight);
    turningSystemQuadratureFrontRight->SetDistancePerPulse(1.0);
    turningSystemQuadratureFrontRight->SetPIDSourceType(frc::PIDSourceType::kRate);
    turningSystemTurnFrontRight.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ turningSystemQuadratureFrontRight.get(), turningSystemTurnMotorFrontRight.get(), 0.02));
    lw->AddActuator("TurningSystem", "TurnFrontRight", turningSystemTurnFrontRight);
    turningSystemTurnFrontRight->SetContinuous(false); turningSystemTurnFrontRight->SetAbsoluteTolerance(0.2); 
    turningSystemTurnFrontRight->SetOutputRange(-1.0, 1.0);
    turningSystemTurnMotorRearRight.reset(new frc::Spark(3));
    lw->AddActuator("TurningSystem", "TurnMotorRearRight", std::static_pointer_cast<frc::Spark>(turningSystemTurnMotorRearRight));
    
    turningSystemQuadratureRearRight.reset(new frc::Encoder(6, 7, false, frc::Encoder::k4X));
    lw->AddSensor("TurningSystem", "QuadratureRearRight", turningSystemQuadratureRearRight);
    turningSystemQuadratureRearRight->SetDistancePerPulse(1.0);
    turningSystemQuadratureRearRight->SetPIDSourceType(frc::PIDSourceType::kRate);
    turningSystemTurnRearRight.reset(new frc::PIDController(1.0, 0.0, 0.0,/* F: 0.0, */ turningSystemQuadratureRearRight.get(), turningSystemTurnMotorRearRight.get(), 0.02));
    lw->AddActuator("TurningSystem", "TurnRearRight", turningSystemTurnRearRight);
    turningSystemTurnRearRight->SetContinuous(false); turningSystemTurnRearRight->SetAbsoluteTolerance(0.2); 
    turningSystemTurnRearRight->SetOutputRange(-1.0, 1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
